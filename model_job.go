/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// Job struct for Job
type Job struct {
	Id                   int32                    `json:"id"`
	Abortable            *bool                    `json:"abortable,omitempty"`
	Arguments            []map[string]interface{} `json:"arguments,omitempty"`
	Description          *string                  `json:"description,omitempty"`
	Error                *string                  `json:"error,omitempty"`
	Exception            *string                  `json:"exception,omitempty"`
	LogsExcerpt          *string                  `json:"logs_excerpt,omitempty"`
	LogsPath             *string                  `json:"logs_path,omitempty"`
	Method               *string                  `json:"method,omitempty"`
	Progress             *JobProgress             `json:"progress,omitempty"`
	Result               map[string]interface{}   `json:"result,omitempty"`
	State                *string                  `json:"state,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Job Job

// NewJob instantiates a new Job object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJob(id int32) *Job {
	this := Job{}
	this.Id = id
	return &this
}

// NewJobWithDefaults instantiates a new Job object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobWithDefaults() *Job {
	this := Job{}
	return &this
}

// GetId returns the Id field value
func (o *Job) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Job) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Job) SetId(v int32) {
	o.Id = v
}

// GetAbortable returns the Abortable field value if set, zero value otherwise.
func (o *Job) GetAbortable() bool {
	if o == nil || isNil(o.Abortable) {
		var ret bool
		return ret
	}
	return *o.Abortable
}

// GetAbortableOk returns a tuple with the Abortable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetAbortableOk() (*bool, bool) {
	if o == nil || isNil(o.Abortable) {
		return nil, false
	}
	return o.Abortable, true
}

// HasAbortable returns a boolean if a field has been set.
func (o *Job) HasAbortable() bool {
	if o != nil && !isNil(o.Abortable) {
		return true
	}

	return false
}

// SetAbortable gets a reference to the given bool and assigns it to the Abortable field.
func (o *Job) SetAbortable(v bool) {
	o.Abortable = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *Job) GetArguments() []map[string]interface{} {
	if o == nil || isNil(o.Arguments) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetArgumentsOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.Arguments) {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *Job) HasArguments() bool {
	if o != nil && !isNil(o.Arguments) {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []map[string]interface{} and assigns it to the Arguments field.
func (o *Job) SetArguments(v []map[string]interface{}) {
	o.Arguments = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Job) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Job) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Job) SetDescription(v string) {
	o.Description = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Job) GetError() string {
	if o == nil || isNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetErrorOk() (*string, bool) {
	if o == nil || isNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Job) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *Job) SetError(v string) {
	o.Error = &v
}

// GetException returns the Exception field value if set, zero value otherwise.
func (o *Job) GetException() string {
	if o == nil || isNil(o.Exception) {
		var ret string
		return ret
	}
	return *o.Exception
}

// GetExceptionOk returns a tuple with the Exception field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetExceptionOk() (*string, bool) {
	if o == nil || isNil(o.Exception) {
		return nil, false
	}
	return o.Exception, true
}

// HasException returns a boolean if a field has been set.
func (o *Job) HasException() bool {
	if o != nil && !isNil(o.Exception) {
		return true
	}

	return false
}

// SetException gets a reference to the given string and assigns it to the Exception field.
func (o *Job) SetException(v string) {
	o.Exception = &v
}

// GetLogsExcerpt returns the LogsExcerpt field value if set, zero value otherwise.
func (o *Job) GetLogsExcerpt() string {
	if o == nil || isNil(o.LogsExcerpt) {
		var ret string
		return ret
	}
	return *o.LogsExcerpt
}

// GetLogsExcerptOk returns a tuple with the LogsExcerpt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetLogsExcerptOk() (*string, bool) {
	if o == nil || isNil(o.LogsExcerpt) {
		return nil, false
	}
	return o.LogsExcerpt, true
}

// HasLogsExcerpt returns a boolean if a field has been set.
func (o *Job) HasLogsExcerpt() bool {
	if o != nil && !isNil(o.LogsExcerpt) {
		return true
	}

	return false
}

// SetLogsExcerpt gets a reference to the given string and assigns it to the LogsExcerpt field.
func (o *Job) SetLogsExcerpt(v string) {
	o.LogsExcerpt = &v
}

// GetLogsPath returns the LogsPath field value if set, zero value otherwise.
func (o *Job) GetLogsPath() string {
	if o == nil || isNil(o.LogsPath) {
		var ret string
		return ret
	}
	return *o.LogsPath
}

// GetLogsPathOk returns a tuple with the LogsPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetLogsPathOk() (*string, bool) {
	if o == nil || isNil(o.LogsPath) {
		return nil, false
	}
	return o.LogsPath, true
}

// HasLogsPath returns a boolean if a field has been set.
func (o *Job) HasLogsPath() bool {
	if o != nil && !isNil(o.LogsPath) {
		return true
	}

	return false
}

// SetLogsPath gets a reference to the given string and assigns it to the LogsPath field.
func (o *Job) SetLogsPath(v string) {
	o.LogsPath = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *Job) GetMethod() string {
	if o == nil || isNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetMethodOk() (*string, bool) {
	if o == nil || isNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *Job) HasMethod() bool {
	if o != nil && !isNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *Job) SetMethod(v string) {
	o.Method = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *Job) GetProgress() JobProgress {
	if o == nil || isNil(o.Progress) {
		var ret JobProgress
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetProgressOk() (*JobProgress, bool) {
	if o == nil || isNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *Job) HasProgress() bool {
	if o != nil && !isNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given JobProgress and assigns it to the Progress field.
func (o *Job) SetProgress(v JobProgress) {
	o.Progress = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *Job) GetResult() map[string]interface{} {
	if o == nil || isNil(o.Result) {
		var ret map[string]interface{}
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetResultOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Result) {
		return map[string]interface{}{}, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *Job) HasResult() bool {
	if o != nil && !isNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given map[string]interface{} and assigns it to the Result field.
func (o *Job) SetResult(v map[string]interface{}) {
	o.Result = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Job) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Job) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Job) SetState(v string) {
	o.State = &v
}

func (o Job) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Abortable) {
		toSerialize["abortable"] = o.Abortable
	}
	if !isNil(o.Arguments) {
		toSerialize["arguments"] = o.Arguments
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !isNil(o.Exception) {
		toSerialize["exception"] = o.Exception
	}
	if !isNil(o.LogsExcerpt) {
		toSerialize["logs_excerpt"] = o.LogsExcerpt
	}
	if !isNil(o.LogsPath) {
		toSerialize["logs_path"] = o.LogsPath
	}
	if !isNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !isNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !isNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Job) UnmarshalJSON(bytes []byte) (err error) {
	varJob := _Job{}

	if err = json.Unmarshal(bytes, &varJob); err == nil {
		*o = Job(varJob)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "abortable")
		delete(additionalProperties, "arguments")
		delete(additionalProperties, "description")
		delete(additionalProperties, "error")
		delete(additionalProperties, "exception")
		delete(additionalProperties, "logs_excerpt")
		delete(additionalProperties, "logs_path")
		delete(additionalProperties, "method")
		delete(additionalProperties, "progress")
		delete(additionalProperties, "result")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJob struct {
	value *Job
	isSet bool
}

func (v NullableJob) Get() *Job {
	return v.value
}

func (v *NullableJob) Set(val *Job) {
	v.value = val
	v.isSet = true
}

func (v NullableJob) IsSet() bool {
	return v.isSet
}

func (v *NullableJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJob(val *Job) *NullableJob {
	return &NullableJob{value: val, isSet: true}
}

func (v NullableJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
