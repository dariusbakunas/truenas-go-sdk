/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// JobProgress struct for JobProgress
type JobProgress struct {
	Percent              *float32 `json:"percent,omitempty"`
	Description          *string  `json:"description,omitempty"`
	Extra                *string  `json:"extra,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JobProgress JobProgress

// NewJobProgress instantiates a new JobProgress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobProgress() *JobProgress {
	this := JobProgress{}
	return &this
}

// NewJobProgressWithDefaults instantiates a new JobProgress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobProgressWithDefaults() *JobProgress {
	this := JobProgress{}
	return &this
}

// GetPercent returns the Percent field value if set, zero value otherwise.
func (o *JobProgress) GetPercent() float32 {
	if o == nil || isNil(o.Percent) {
		var ret float32
		return ret
	}
	return *o.Percent
}

// GetPercentOk returns a tuple with the Percent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobProgress) GetPercentOk() (*float32, bool) {
	if o == nil || isNil(o.Percent) {
		return nil, false
	}
	return o.Percent, true
}

// HasPercent returns a boolean if a field has been set.
func (o *JobProgress) HasPercent() bool {
	if o != nil && !isNil(o.Percent) {
		return true
	}

	return false
}

// SetPercent gets a reference to the given float32 and assigns it to the Percent field.
func (o *JobProgress) SetPercent(v float32) {
	o.Percent = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *JobProgress) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobProgress) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *JobProgress) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *JobProgress) SetDescription(v string) {
	o.Description = &v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *JobProgress) GetExtra() string {
	if o == nil || isNil(o.Extra) {
		var ret string
		return ret
	}
	return *o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobProgress) GetExtraOk() (*string, bool) {
	if o == nil || isNil(o.Extra) {
		return nil, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *JobProgress) HasExtra() bool {
	if o != nil && !isNil(o.Extra) {
		return true
	}

	return false
}

// SetExtra gets a reference to the given string and assigns it to the Extra field.
func (o *JobProgress) SetExtra(v string) {
	o.Extra = &v
}

func (o JobProgress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Percent) {
		toSerialize["percent"] = o.Percent
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Extra) {
		toSerialize["extra"] = o.Extra
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *JobProgress) UnmarshalJSON(bytes []byte) (err error) {
	varJobProgress := _JobProgress{}

	if err = json.Unmarshal(bytes, &varJobProgress); err == nil {
		*o = JobProgress(varJobProgress)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "percent")
		delete(additionalProperties, "description")
		delete(additionalProperties, "extra")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobProgress struct {
	value *JobProgress
	isSet bool
}

func (v NullableJobProgress) Get() *JobProgress {
	return v.value
}

func (v *NullableJobProgress) Set(val *JobProgress) {
	v.value = val
	v.isSet = true
}

func (v NullableJobProgress) IsSet() bool {
	return v.isSet
}

func (v *NullableJobProgress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobProgress(val *JobProgress) *NullableJobProgress {
	return &NullableJobProgress{value: val, isSet: true}
}

func (v NullableJobProgress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobProgress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
