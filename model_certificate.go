/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// Certificate struct for Certificate
type Certificate struct {
	Id                   *int32                 `json:"id,omitempty"`
	Type                 *int32                 `json:"type,omitempty"`
	Name                 *string                `json:"name,omitempty"`
	Certificate          *string                `json:"certificate,omitempty"`
	Privatekey           *string                `json:"privatekey,omitempty"`
	RootPath             *string                `json:"root_path,omitempty"`
	CertificatePath      *string                `json:"certificate_path,omitempty"`
	PrivatekeyPath       *string                `json:"privatekey_path,omitempty"`
	CsrPath              *string                `json:"csr_path,omitempty"`
	CertType             *string                `json:"cert_type,omitempty"`
	Revoked              *bool                  `json:"revoked,omitempty"`
	CanBeRevoked         *bool                  `json:"can_be_revoked,omitempty"`
	Internal             *string                `json:"internal,omitempty"`
	CATypeExisting       *bool                  `json:"CA_type_existing,omitempty"`
	CATypeInternal       *bool                  `json:"CA_type_internal,omitempty"`
	CATypeIntermediate   *bool                  `json:"CA_type_intermediate,omitempty"`
	CertTypeExisting     *bool                  `json:"cert_type_existing,omitempty"`
	CertTypeInternal     *bool                  `json:"cert_type_internal,omitempty"`
	CertTypeCSR          *bool                  `json:"cert_type_CSR,omitempty"`
	Issuer               *string                `json:"issuer,omitempty"`
	ChainList            []string               `json:"chain_list,omitempty"`
	KeyLength            *int32                 `json:"key_length,omitempty"`
	KeyType              *string                `json:"key_type,omitempty"`
	Country              *string                `json:"country,omitempty"`
	State                *string                `json:"state,omitempty"`
	City                 *string                `json:"city,omitempty"`
	Organization         *string                `json:"organization,omitempty"`
	OrganizationalUnit   *string                `json:"organizational_unit,omitempty"`
	Common               *string                `json:"common,omitempty"`
	San                  []string               `json:"san,omitempty"`
	Email                *string                `json:"email,omitempty"`
	DN                   *string                `json:"DN,omitempty"`
	SubjectNameHash      *int64                 `json:"subject_name_hash,omitempty"`
	Extensions           map[string]interface{} `json:"extensions,omitempty"`
	DigestAlgorithm      *string                `json:"digest_algorithm,omitempty"`
	Lifetime             *int32                 `json:"lifetime,omitempty"`
	From                 *string                `json:"from,omitempty"`
	Until                *string                `json:"until,omitempty"`
	Serial               *int32                 `json:"serial,omitempty"`
	Chain                *bool                  `json:"chain,omitempty"`
	Fingerprint          *string                `json:"fingerprint,omitempty"`
	Parsed               *bool                  `json:"parsed,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Certificate Certificate

// NewCertificate instantiates a new Certificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificate() *Certificate {
	this := Certificate{}
	return &this
}

// NewCertificateWithDefaults instantiates a new Certificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateWithDefaults() *Certificate {
	this := Certificate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Certificate) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Certificate) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Certificate) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Certificate) GetType() int32 {
	if o == nil || isNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetTypeOk() (*int32, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Certificate) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *Certificate) SetType(v int32) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Certificate) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Certificate) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Certificate) SetName(v string) {
	o.Name = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *Certificate) GetCertificate() string {
	if o == nil || isNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCertificateOk() (*string, bool) {
	if o == nil || isNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *Certificate) HasCertificate() bool {
	if o != nil && !isNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *Certificate) SetCertificate(v string) {
	o.Certificate = &v
}

// GetPrivatekey returns the Privatekey field value if set, zero value otherwise.
func (o *Certificate) GetPrivatekey() string {
	if o == nil || isNil(o.Privatekey) {
		var ret string
		return ret
	}
	return *o.Privatekey
}

// GetPrivatekeyOk returns a tuple with the Privatekey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetPrivatekeyOk() (*string, bool) {
	if o == nil || isNil(o.Privatekey) {
		return nil, false
	}
	return o.Privatekey, true
}

// HasPrivatekey returns a boolean if a field has been set.
func (o *Certificate) HasPrivatekey() bool {
	if o != nil && !isNil(o.Privatekey) {
		return true
	}

	return false
}

// SetPrivatekey gets a reference to the given string and assigns it to the Privatekey field.
func (o *Certificate) SetPrivatekey(v string) {
	o.Privatekey = &v
}

// GetRootPath returns the RootPath field value if set, zero value otherwise.
func (o *Certificate) GetRootPath() string {
	if o == nil || isNil(o.RootPath) {
		var ret string
		return ret
	}
	return *o.RootPath
}

// GetRootPathOk returns a tuple with the RootPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetRootPathOk() (*string, bool) {
	if o == nil || isNil(o.RootPath) {
		return nil, false
	}
	return o.RootPath, true
}

// HasRootPath returns a boolean if a field has been set.
func (o *Certificate) HasRootPath() bool {
	if o != nil && !isNil(o.RootPath) {
		return true
	}

	return false
}

// SetRootPath gets a reference to the given string and assigns it to the RootPath field.
func (o *Certificate) SetRootPath(v string) {
	o.RootPath = &v
}

// GetCertificatePath returns the CertificatePath field value if set, zero value otherwise.
func (o *Certificate) GetCertificatePath() string {
	if o == nil || isNil(o.CertificatePath) {
		var ret string
		return ret
	}
	return *o.CertificatePath
}

// GetCertificatePathOk returns a tuple with the CertificatePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCertificatePathOk() (*string, bool) {
	if o == nil || isNil(o.CertificatePath) {
		return nil, false
	}
	return o.CertificatePath, true
}

// HasCertificatePath returns a boolean if a field has been set.
func (o *Certificate) HasCertificatePath() bool {
	if o != nil && !isNil(o.CertificatePath) {
		return true
	}

	return false
}

// SetCertificatePath gets a reference to the given string and assigns it to the CertificatePath field.
func (o *Certificate) SetCertificatePath(v string) {
	o.CertificatePath = &v
}

// GetPrivatekeyPath returns the PrivatekeyPath field value if set, zero value otherwise.
func (o *Certificate) GetPrivatekeyPath() string {
	if o == nil || isNil(o.PrivatekeyPath) {
		var ret string
		return ret
	}
	return *o.PrivatekeyPath
}

// GetPrivatekeyPathOk returns a tuple with the PrivatekeyPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetPrivatekeyPathOk() (*string, bool) {
	if o == nil || isNil(o.PrivatekeyPath) {
		return nil, false
	}
	return o.PrivatekeyPath, true
}

// HasPrivatekeyPath returns a boolean if a field has been set.
func (o *Certificate) HasPrivatekeyPath() bool {
	if o != nil && !isNil(o.PrivatekeyPath) {
		return true
	}

	return false
}

// SetPrivatekeyPath gets a reference to the given string and assigns it to the PrivatekeyPath field.
func (o *Certificate) SetPrivatekeyPath(v string) {
	o.PrivatekeyPath = &v
}

// GetCsrPath returns the CsrPath field value if set, zero value otherwise.
func (o *Certificate) GetCsrPath() string {
	if o == nil || isNil(o.CsrPath) {
		var ret string
		return ret
	}
	return *o.CsrPath
}

// GetCsrPathOk returns a tuple with the CsrPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCsrPathOk() (*string, bool) {
	if o == nil || isNil(o.CsrPath) {
		return nil, false
	}
	return o.CsrPath, true
}

// HasCsrPath returns a boolean if a field has been set.
func (o *Certificate) HasCsrPath() bool {
	if o != nil && !isNil(o.CsrPath) {
		return true
	}

	return false
}

// SetCsrPath gets a reference to the given string and assigns it to the CsrPath field.
func (o *Certificate) SetCsrPath(v string) {
	o.CsrPath = &v
}

// GetCertType returns the CertType field value if set, zero value otherwise.
func (o *Certificate) GetCertType() string {
	if o == nil || isNil(o.CertType) {
		var ret string
		return ret
	}
	return *o.CertType
}

// GetCertTypeOk returns a tuple with the CertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCertTypeOk() (*string, bool) {
	if o == nil || isNil(o.CertType) {
		return nil, false
	}
	return o.CertType, true
}

// HasCertType returns a boolean if a field has been set.
func (o *Certificate) HasCertType() bool {
	if o != nil && !isNil(o.CertType) {
		return true
	}

	return false
}

// SetCertType gets a reference to the given string and assigns it to the CertType field.
func (o *Certificate) SetCertType(v string) {
	o.CertType = &v
}

// GetRevoked returns the Revoked field value if set, zero value otherwise.
func (o *Certificate) GetRevoked() bool {
	if o == nil || isNil(o.Revoked) {
		var ret bool
		return ret
	}
	return *o.Revoked
}

// GetRevokedOk returns a tuple with the Revoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetRevokedOk() (*bool, bool) {
	if o == nil || isNil(o.Revoked) {
		return nil, false
	}
	return o.Revoked, true
}

// HasRevoked returns a boolean if a field has been set.
func (o *Certificate) HasRevoked() bool {
	if o != nil && !isNil(o.Revoked) {
		return true
	}

	return false
}

// SetRevoked gets a reference to the given bool and assigns it to the Revoked field.
func (o *Certificate) SetRevoked(v bool) {
	o.Revoked = &v
}

// GetCanBeRevoked returns the CanBeRevoked field value if set, zero value otherwise.
func (o *Certificate) GetCanBeRevoked() bool {
	if o == nil || isNil(o.CanBeRevoked) {
		var ret bool
		return ret
	}
	return *o.CanBeRevoked
}

// GetCanBeRevokedOk returns a tuple with the CanBeRevoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCanBeRevokedOk() (*bool, bool) {
	if o == nil || isNil(o.CanBeRevoked) {
		return nil, false
	}
	return o.CanBeRevoked, true
}

// HasCanBeRevoked returns a boolean if a field has been set.
func (o *Certificate) HasCanBeRevoked() bool {
	if o != nil && !isNil(o.CanBeRevoked) {
		return true
	}

	return false
}

// SetCanBeRevoked gets a reference to the given bool and assigns it to the CanBeRevoked field.
func (o *Certificate) SetCanBeRevoked(v bool) {
	o.CanBeRevoked = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *Certificate) GetInternal() string {
	if o == nil || isNil(o.Internal) {
		var ret string
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetInternalOk() (*string, bool) {
	if o == nil || isNil(o.Internal) {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *Certificate) HasInternal() bool {
	if o != nil && !isNil(o.Internal) {
		return true
	}

	return false
}

// SetInternal gets a reference to the given string and assigns it to the Internal field.
func (o *Certificate) SetInternal(v string) {
	o.Internal = &v
}

// GetCATypeExisting returns the CATypeExisting field value if set, zero value otherwise.
func (o *Certificate) GetCATypeExisting() bool {
	if o == nil || isNil(o.CATypeExisting) {
		var ret bool
		return ret
	}
	return *o.CATypeExisting
}

// GetCATypeExistingOk returns a tuple with the CATypeExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCATypeExistingOk() (*bool, bool) {
	if o == nil || isNil(o.CATypeExisting) {
		return nil, false
	}
	return o.CATypeExisting, true
}

// HasCATypeExisting returns a boolean if a field has been set.
func (o *Certificate) HasCATypeExisting() bool {
	if o != nil && !isNil(o.CATypeExisting) {
		return true
	}

	return false
}

// SetCATypeExisting gets a reference to the given bool and assigns it to the CATypeExisting field.
func (o *Certificate) SetCATypeExisting(v bool) {
	o.CATypeExisting = &v
}

// GetCATypeInternal returns the CATypeInternal field value if set, zero value otherwise.
func (o *Certificate) GetCATypeInternal() bool {
	if o == nil || isNil(o.CATypeInternal) {
		var ret bool
		return ret
	}
	return *o.CATypeInternal
}

// GetCATypeInternalOk returns a tuple with the CATypeInternal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCATypeInternalOk() (*bool, bool) {
	if o == nil || isNil(o.CATypeInternal) {
		return nil, false
	}
	return o.CATypeInternal, true
}

// HasCATypeInternal returns a boolean if a field has been set.
func (o *Certificate) HasCATypeInternal() bool {
	if o != nil && !isNil(o.CATypeInternal) {
		return true
	}

	return false
}

// SetCATypeInternal gets a reference to the given bool and assigns it to the CATypeInternal field.
func (o *Certificate) SetCATypeInternal(v bool) {
	o.CATypeInternal = &v
}

// GetCATypeIntermediate returns the CATypeIntermediate field value if set, zero value otherwise.
func (o *Certificate) GetCATypeIntermediate() bool {
	if o == nil || isNil(o.CATypeIntermediate) {
		var ret bool
		return ret
	}
	return *o.CATypeIntermediate
}

// GetCATypeIntermediateOk returns a tuple with the CATypeIntermediate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCATypeIntermediateOk() (*bool, bool) {
	if o == nil || isNil(o.CATypeIntermediate) {
		return nil, false
	}
	return o.CATypeIntermediate, true
}

// HasCATypeIntermediate returns a boolean if a field has been set.
func (o *Certificate) HasCATypeIntermediate() bool {
	if o != nil && !isNil(o.CATypeIntermediate) {
		return true
	}

	return false
}

// SetCATypeIntermediate gets a reference to the given bool and assigns it to the CATypeIntermediate field.
func (o *Certificate) SetCATypeIntermediate(v bool) {
	o.CATypeIntermediate = &v
}

// GetCertTypeExisting returns the CertTypeExisting field value if set, zero value otherwise.
func (o *Certificate) GetCertTypeExisting() bool {
	if o == nil || isNil(o.CertTypeExisting) {
		var ret bool
		return ret
	}
	return *o.CertTypeExisting
}

// GetCertTypeExistingOk returns a tuple with the CertTypeExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCertTypeExistingOk() (*bool, bool) {
	if o == nil || isNil(o.CertTypeExisting) {
		return nil, false
	}
	return o.CertTypeExisting, true
}

// HasCertTypeExisting returns a boolean if a field has been set.
func (o *Certificate) HasCertTypeExisting() bool {
	if o != nil && !isNil(o.CertTypeExisting) {
		return true
	}

	return false
}

// SetCertTypeExisting gets a reference to the given bool and assigns it to the CertTypeExisting field.
func (o *Certificate) SetCertTypeExisting(v bool) {
	o.CertTypeExisting = &v
}

// GetCertTypeInternal returns the CertTypeInternal field value if set, zero value otherwise.
func (o *Certificate) GetCertTypeInternal() bool {
	if o == nil || isNil(o.CertTypeInternal) {
		var ret bool
		return ret
	}
	return *o.CertTypeInternal
}

// GetCertTypeInternalOk returns a tuple with the CertTypeInternal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCertTypeInternalOk() (*bool, bool) {
	if o == nil || isNil(o.CertTypeInternal) {
		return nil, false
	}
	return o.CertTypeInternal, true
}

// HasCertTypeInternal returns a boolean if a field has been set.
func (o *Certificate) HasCertTypeInternal() bool {
	if o != nil && !isNil(o.CertTypeInternal) {
		return true
	}

	return false
}

// SetCertTypeInternal gets a reference to the given bool and assigns it to the CertTypeInternal field.
func (o *Certificate) SetCertTypeInternal(v bool) {
	o.CertTypeInternal = &v
}

// GetCertTypeCSR returns the CertTypeCSR field value if set, zero value otherwise.
func (o *Certificate) GetCertTypeCSR() bool {
	if o == nil || isNil(o.CertTypeCSR) {
		var ret bool
		return ret
	}
	return *o.CertTypeCSR
}

// GetCertTypeCSROk returns a tuple with the CertTypeCSR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCertTypeCSROk() (*bool, bool) {
	if o == nil || isNil(o.CertTypeCSR) {
		return nil, false
	}
	return o.CertTypeCSR, true
}

// HasCertTypeCSR returns a boolean if a field has been set.
func (o *Certificate) HasCertTypeCSR() bool {
	if o != nil && !isNil(o.CertTypeCSR) {
		return true
	}

	return false
}

// SetCertTypeCSR gets a reference to the given bool and assigns it to the CertTypeCSR field.
func (o *Certificate) SetCertTypeCSR(v bool) {
	o.CertTypeCSR = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *Certificate) GetIssuer() string {
	if o == nil || isNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetIssuerOk() (*string, bool) {
	if o == nil || isNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *Certificate) HasIssuer() bool {
	if o != nil && !isNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *Certificate) SetIssuer(v string) {
	o.Issuer = &v
}

// GetChainList returns the ChainList field value if set, zero value otherwise.
func (o *Certificate) GetChainList() []string {
	if o == nil || isNil(o.ChainList) {
		var ret []string
		return ret
	}
	return o.ChainList
}

// GetChainListOk returns a tuple with the ChainList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetChainListOk() ([]string, bool) {
	if o == nil || isNil(o.ChainList) {
		return nil, false
	}
	return o.ChainList, true
}

// HasChainList returns a boolean if a field has been set.
func (o *Certificate) HasChainList() bool {
	if o != nil && !isNil(o.ChainList) {
		return true
	}

	return false
}

// SetChainList gets a reference to the given []string and assigns it to the ChainList field.
func (o *Certificate) SetChainList(v []string) {
	o.ChainList = v
}

// GetKeyLength returns the KeyLength field value if set, zero value otherwise.
func (o *Certificate) GetKeyLength() int32 {
	if o == nil || isNil(o.KeyLength) {
		var ret int32
		return ret
	}
	return *o.KeyLength
}

// GetKeyLengthOk returns a tuple with the KeyLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetKeyLengthOk() (*int32, bool) {
	if o == nil || isNil(o.KeyLength) {
		return nil, false
	}
	return o.KeyLength, true
}

// HasKeyLength returns a boolean if a field has been set.
func (o *Certificate) HasKeyLength() bool {
	if o != nil && !isNil(o.KeyLength) {
		return true
	}

	return false
}

// SetKeyLength gets a reference to the given int32 and assigns it to the KeyLength field.
func (o *Certificate) SetKeyLength(v int32) {
	o.KeyLength = &v
}

// GetKeyType returns the KeyType field value if set, zero value otherwise.
func (o *Certificate) GetKeyType() string {
	if o == nil || isNil(o.KeyType) {
		var ret string
		return ret
	}
	return *o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetKeyTypeOk() (*string, bool) {
	if o == nil || isNil(o.KeyType) {
		return nil, false
	}
	return o.KeyType, true
}

// HasKeyType returns a boolean if a field has been set.
func (o *Certificate) HasKeyType() bool {
	if o != nil && !isNil(o.KeyType) {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given string and assigns it to the KeyType field.
func (o *Certificate) SetKeyType(v string) {
	o.KeyType = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Certificate) GetCountry() string {
	if o == nil || isNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCountryOk() (*string, bool) {
	if o == nil || isNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Certificate) HasCountry() bool {
	if o != nil && !isNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *Certificate) SetCountry(v string) {
	o.Country = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Certificate) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Certificate) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Certificate) SetState(v string) {
	o.State = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *Certificate) GetCity() string {
	if o == nil || isNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCityOk() (*string, bool) {
	if o == nil || isNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *Certificate) HasCity() bool {
	if o != nil && !isNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *Certificate) SetCity(v string) {
	o.City = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *Certificate) GetOrganization() string {
	if o == nil || isNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetOrganizationOk() (*string, bool) {
	if o == nil || isNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *Certificate) HasOrganization() bool {
	if o != nil && !isNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *Certificate) SetOrganization(v string) {
	o.Organization = &v
}

// GetOrganizationalUnit returns the OrganizationalUnit field value if set, zero value otherwise.
func (o *Certificate) GetOrganizationalUnit() string {
	if o == nil || isNil(o.OrganizationalUnit) {
		var ret string
		return ret
	}
	return *o.OrganizationalUnit
}

// GetOrganizationalUnitOk returns a tuple with the OrganizationalUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetOrganizationalUnitOk() (*string, bool) {
	if o == nil || isNil(o.OrganizationalUnit) {
		return nil, false
	}
	return o.OrganizationalUnit, true
}

// HasOrganizationalUnit returns a boolean if a field has been set.
func (o *Certificate) HasOrganizationalUnit() bool {
	if o != nil && !isNil(o.OrganizationalUnit) {
		return true
	}

	return false
}

// SetOrganizationalUnit gets a reference to the given string and assigns it to the OrganizationalUnit field.
func (o *Certificate) SetOrganizationalUnit(v string) {
	o.OrganizationalUnit = &v
}

// GetCommon returns the Common field value if set, zero value otherwise.
func (o *Certificate) GetCommon() string {
	if o == nil || isNil(o.Common) {
		var ret string
		return ret
	}
	return *o.Common
}

// GetCommonOk returns a tuple with the Common field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetCommonOk() (*string, bool) {
	if o == nil || isNil(o.Common) {
		return nil, false
	}
	return o.Common, true
}

// HasCommon returns a boolean if a field has been set.
func (o *Certificate) HasCommon() bool {
	if o != nil && !isNil(o.Common) {
		return true
	}

	return false
}

// SetCommon gets a reference to the given string and assigns it to the Common field.
func (o *Certificate) SetCommon(v string) {
	o.Common = &v
}

// GetSan returns the San field value if set, zero value otherwise.
func (o *Certificate) GetSan() []string {
	if o == nil || isNil(o.San) {
		var ret []string
		return ret
	}
	return o.San
}

// GetSanOk returns a tuple with the San field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetSanOk() ([]string, bool) {
	if o == nil || isNil(o.San) {
		return nil, false
	}
	return o.San, true
}

// HasSan returns a boolean if a field has been set.
func (o *Certificate) HasSan() bool {
	if o != nil && !isNil(o.San) {
		return true
	}

	return false
}

// SetSan gets a reference to the given []string and assigns it to the San field.
func (o *Certificate) SetSan(v []string) {
	o.San = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Certificate) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Certificate) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Certificate) SetEmail(v string) {
	o.Email = &v
}

// GetDN returns the DN field value if set, zero value otherwise.
func (o *Certificate) GetDN() string {
	if o == nil || isNil(o.DN) {
		var ret string
		return ret
	}
	return *o.DN
}

// GetDNOk returns a tuple with the DN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetDNOk() (*string, bool) {
	if o == nil || isNil(o.DN) {
		return nil, false
	}
	return o.DN, true
}

// HasDN returns a boolean if a field has been set.
func (o *Certificate) HasDN() bool {
	if o != nil && !isNil(o.DN) {
		return true
	}

	return false
}

// SetDN gets a reference to the given string and assigns it to the DN field.
func (o *Certificate) SetDN(v string) {
	o.DN = &v
}

// GetSubjectNameHash returns the SubjectNameHash field value if set, zero value otherwise.
func (o *Certificate) GetSubjectNameHash() int64 {
	if o == nil || isNil(o.SubjectNameHash) {
		var ret int64
		return ret
	}
	return *o.SubjectNameHash
}

// GetSubjectNameHashOk returns a tuple with the SubjectNameHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetSubjectNameHashOk() (*int64, bool) {
	if o == nil || isNil(o.SubjectNameHash) {
		return nil, false
	}
	return o.SubjectNameHash, true
}

// HasSubjectNameHash returns a boolean if a field has been set.
func (o *Certificate) HasSubjectNameHash() bool {
	if o != nil && !isNil(o.SubjectNameHash) {
		return true
	}

	return false
}

// SetSubjectNameHash gets a reference to the given int64 and assigns it to the SubjectNameHash field.
func (o *Certificate) SetSubjectNameHash(v int64) {
	o.SubjectNameHash = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *Certificate) GetExtensions() map[string]interface{} {
	if o == nil || isNil(o.Extensions) {
		var ret map[string]interface{}
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetExtensionsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Extensions) {
		return map[string]interface{}{}, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *Certificate) HasExtensions() bool {
	if o != nil && !isNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given map[string]interface{} and assigns it to the Extensions field.
func (o *Certificate) SetExtensions(v map[string]interface{}) {
	o.Extensions = v
}

// GetDigestAlgorithm returns the DigestAlgorithm field value if set, zero value otherwise.
func (o *Certificate) GetDigestAlgorithm() string {
	if o == nil || isNil(o.DigestAlgorithm) {
		var ret string
		return ret
	}
	return *o.DigestAlgorithm
}

// GetDigestAlgorithmOk returns a tuple with the DigestAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetDigestAlgorithmOk() (*string, bool) {
	if o == nil || isNil(o.DigestAlgorithm) {
		return nil, false
	}
	return o.DigestAlgorithm, true
}

// HasDigestAlgorithm returns a boolean if a field has been set.
func (o *Certificate) HasDigestAlgorithm() bool {
	if o != nil && !isNil(o.DigestAlgorithm) {
		return true
	}

	return false
}

// SetDigestAlgorithm gets a reference to the given string and assigns it to the DigestAlgorithm field.
func (o *Certificate) SetDigestAlgorithm(v string) {
	o.DigestAlgorithm = &v
}

// GetLifetime returns the Lifetime field value if set, zero value otherwise.
func (o *Certificate) GetLifetime() int32 {
	if o == nil || isNil(o.Lifetime) {
		var ret int32
		return ret
	}
	return *o.Lifetime
}

// GetLifetimeOk returns a tuple with the Lifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetLifetimeOk() (*int32, bool) {
	if o == nil || isNil(o.Lifetime) {
		return nil, false
	}
	return o.Lifetime, true
}

// HasLifetime returns a boolean if a field has been set.
func (o *Certificate) HasLifetime() bool {
	if o != nil && !isNil(o.Lifetime) {
		return true
	}

	return false
}

// SetLifetime gets a reference to the given int32 and assigns it to the Lifetime field.
func (o *Certificate) SetLifetime(v int32) {
	o.Lifetime = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *Certificate) GetFrom() string {
	if o == nil || isNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetFromOk() (*string, bool) {
	if o == nil || isNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *Certificate) HasFrom() bool {
	if o != nil && !isNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *Certificate) SetFrom(v string) {
	o.From = &v
}

// GetUntil returns the Until field value if set, zero value otherwise.
func (o *Certificate) GetUntil() string {
	if o == nil || isNil(o.Until) {
		var ret string
		return ret
	}
	return *o.Until
}

// GetUntilOk returns a tuple with the Until field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetUntilOk() (*string, bool) {
	if o == nil || isNil(o.Until) {
		return nil, false
	}
	return o.Until, true
}

// HasUntil returns a boolean if a field has been set.
func (o *Certificate) HasUntil() bool {
	if o != nil && !isNil(o.Until) {
		return true
	}

	return false
}

// SetUntil gets a reference to the given string and assigns it to the Until field.
func (o *Certificate) SetUntil(v string) {
	o.Until = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *Certificate) GetSerial() int32 {
	if o == nil || isNil(o.Serial) {
		var ret int32
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetSerialOk() (*int32, bool) {
	if o == nil || isNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *Certificate) HasSerial() bool {
	if o != nil && !isNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given int32 and assigns it to the Serial field.
func (o *Certificate) SetSerial(v int32) {
	o.Serial = &v
}

// GetChain returns the Chain field value if set, zero value otherwise.
func (o *Certificate) GetChain() bool {
	if o == nil || isNil(o.Chain) {
		var ret bool
		return ret
	}
	return *o.Chain
}

// GetChainOk returns a tuple with the Chain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetChainOk() (*bool, bool) {
	if o == nil || isNil(o.Chain) {
		return nil, false
	}
	return o.Chain, true
}

// HasChain returns a boolean if a field has been set.
func (o *Certificate) HasChain() bool {
	if o != nil && !isNil(o.Chain) {
		return true
	}

	return false
}

// SetChain gets a reference to the given bool and assigns it to the Chain field.
func (o *Certificate) SetChain(v bool) {
	o.Chain = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *Certificate) GetFingerprint() string {
	if o == nil || isNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetFingerprintOk() (*string, bool) {
	if o == nil || isNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *Certificate) HasFingerprint() bool {
	if o != nil && !isNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *Certificate) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetParsed returns the Parsed field value if set, zero value otherwise.
func (o *Certificate) GetParsed() bool {
	if o == nil || isNil(o.Parsed) {
		var ret bool
		return ret
	}
	return *o.Parsed
}

// GetParsedOk returns a tuple with the Parsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetParsedOk() (*bool, bool) {
	if o == nil || isNil(o.Parsed) {
		return nil, false
	}
	return o.Parsed, true
}

// HasParsed returns a boolean if a field has been set.
func (o *Certificate) HasParsed() bool {
	if o != nil && !isNil(o.Parsed) {
		return true
	}

	return false
}

// SetParsed gets a reference to the given bool and assigns it to the Parsed field.
func (o *Certificate) SetParsed(v bool) {
	o.Parsed = &v
}

func (o Certificate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !isNil(o.Privatekey) {
		toSerialize["privatekey"] = o.Privatekey
	}
	if !isNil(o.RootPath) {
		toSerialize["root_path"] = o.RootPath
	}
	if !isNil(o.CertificatePath) {
		toSerialize["certificate_path"] = o.CertificatePath
	}
	if !isNil(o.PrivatekeyPath) {
		toSerialize["privatekey_path"] = o.PrivatekeyPath
	}
	if !isNil(o.CsrPath) {
		toSerialize["csr_path"] = o.CsrPath
	}
	if !isNil(o.CertType) {
		toSerialize["cert_type"] = o.CertType
	}
	if !isNil(o.Revoked) {
		toSerialize["revoked"] = o.Revoked
	}
	if !isNil(o.CanBeRevoked) {
		toSerialize["can_be_revoked"] = o.CanBeRevoked
	}
	if !isNil(o.Internal) {
		toSerialize["internal"] = o.Internal
	}
	if !isNil(o.CATypeExisting) {
		toSerialize["CA_type_existing"] = o.CATypeExisting
	}
	if !isNil(o.CATypeInternal) {
		toSerialize["CA_type_internal"] = o.CATypeInternal
	}
	if !isNil(o.CATypeIntermediate) {
		toSerialize["CA_type_intermediate"] = o.CATypeIntermediate
	}
	if !isNil(o.CertTypeExisting) {
		toSerialize["cert_type_existing"] = o.CertTypeExisting
	}
	if !isNil(o.CertTypeInternal) {
		toSerialize["cert_type_internal"] = o.CertTypeInternal
	}
	if !isNil(o.CertTypeCSR) {
		toSerialize["cert_type_CSR"] = o.CertTypeCSR
	}
	if !isNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !isNil(o.ChainList) {
		toSerialize["chain_list"] = o.ChainList
	}
	if !isNil(o.KeyLength) {
		toSerialize["key_length"] = o.KeyLength
	}
	if !isNil(o.KeyType) {
		toSerialize["key_type"] = o.KeyType
	}
	if !isNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !isNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !isNil(o.OrganizationalUnit) {
		toSerialize["organizational_unit"] = o.OrganizationalUnit
	}
	if !isNil(o.Common) {
		toSerialize["common"] = o.Common
	}
	if !isNil(o.San) {
		toSerialize["san"] = o.San
	}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !isNil(o.DN) {
		toSerialize["DN"] = o.DN
	}
	if !isNil(o.SubjectNameHash) {
		toSerialize["subject_name_hash"] = o.SubjectNameHash
	}
	if !isNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	if !isNil(o.DigestAlgorithm) {
		toSerialize["digest_algorithm"] = o.DigestAlgorithm
	}
	if !isNil(o.Lifetime) {
		toSerialize["lifetime"] = o.Lifetime
	}
	if !isNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !isNil(o.Until) {
		toSerialize["until"] = o.Until
	}
	if !isNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !isNil(o.Chain) {
		toSerialize["chain"] = o.Chain
	}
	if !isNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !isNil(o.Parsed) {
		toSerialize["parsed"] = o.Parsed
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Certificate) UnmarshalJSON(bytes []byte) (err error) {
	varCertificate := _Certificate{}

	if err = json.Unmarshal(bytes, &varCertificate); err == nil {
		*o = Certificate(varCertificate)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "privatekey")
		delete(additionalProperties, "root_path")
		delete(additionalProperties, "certificate_path")
		delete(additionalProperties, "privatekey_path")
		delete(additionalProperties, "csr_path")
		delete(additionalProperties, "cert_type")
		delete(additionalProperties, "revoked")
		delete(additionalProperties, "can_be_revoked")
		delete(additionalProperties, "internal")
		delete(additionalProperties, "CA_type_existing")
		delete(additionalProperties, "CA_type_internal")
		delete(additionalProperties, "CA_type_intermediate")
		delete(additionalProperties, "cert_type_existing")
		delete(additionalProperties, "cert_type_internal")
		delete(additionalProperties, "cert_type_CSR")
		delete(additionalProperties, "issuer")
		delete(additionalProperties, "chain_list")
		delete(additionalProperties, "key_length")
		delete(additionalProperties, "key_type")
		delete(additionalProperties, "country")
		delete(additionalProperties, "state")
		delete(additionalProperties, "city")
		delete(additionalProperties, "organization")
		delete(additionalProperties, "organizational_unit")
		delete(additionalProperties, "common")
		delete(additionalProperties, "san")
		delete(additionalProperties, "email")
		delete(additionalProperties, "DN")
		delete(additionalProperties, "subject_name_hash")
		delete(additionalProperties, "extensions")
		delete(additionalProperties, "digest_algorithm")
		delete(additionalProperties, "lifetime")
		delete(additionalProperties, "from")
		delete(additionalProperties, "until")
		delete(additionalProperties, "serial")
		delete(additionalProperties, "chain")
		delete(additionalProperties, "fingerprint")
		delete(additionalProperties, "parsed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificate struct {
	value *Certificate
	isSet bool
}

func (v NullableCertificate) Get() *Certificate {
	return v.value
}

func (v *NullableCertificate) Set(val *Certificate) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificate(val *Certificate) *NullableCertificate {
	return &NullableCertificate{value: val, isSet: true}
}

func (v NullableCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
