/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package angelfish

import (
	"encoding/json"
)

// VM struct for VM
type VM struct {
	Id                   int32      `json:"id"`
	Name                 string     `json:"name"`
	Description          *string    `json:"description,omitempty"`
	Vcpus                *int32     `json:"vcpus,omitempty"`
	Memory               *int64     `json:"memory,omitempty"`
	Autostart            *bool      `json:"autostart,omitempty"`
	Time                 *string    `json:"time,omitempty"`
	Bootloader           *string    `json:"bootloader,omitempty"`
	Cores                *int32     `json:"cores,omitempty"`
	Threads              *int32     `json:"threads,omitempty"`
	ShutdownTimeout      *int32     `json:"shutdown_timeout,omitempty"`
	Devices              []VMDevice `json:"devices,omitempty"`
	Status               *VMStatus  `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VM VM

// NewVM instantiates a new VM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVM(id int32, name string) *VM {
	this := VM{}
	this.Id = id
	this.Name = name
	return &this
}

// NewVMWithDefaults instantiates a new VM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMWithDefaults() *VM {
	this := VM{}
	return &this
}

// GetId returns the Id field value
func (o *VM) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VM) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VM) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *VM) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VM) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VM) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VM) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VM) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VM) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VM) SetDescription(v string) {
	o.Description = &v
}

// GetVcpus returns the Vcpus field value if set, zero value otherwise.
func (o *VM) GetVcpus() int32 {
	if o == nil || isNil(o.Vcpus) {
		var ret int32
		return ret
	}
	return *o.Vcpus
}

// GetVcpusOk returns a tuple with the Vcpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VM) GetVcpusOk() (*int32, bool) {
	if o == nil || isNil(o.Vcpus) {
		return nil, false
	}
	return o.Vcpus, true
}

// HasVcpus returns a boolean if a field has been set.
func (o *VM) HasVcpus() bool {
	if o != nil && !isNil(o.Vcpus) {
		return true
	}

	return false
}

// SetVcpus gets a reference to the given int32 and assigns it to the Vcpus field.
func (o *VM) SetVcpus(v int32) {
	o.Vcpus = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *VM) GetMemory() int64 {
	if o == nil || isNil(o.Memory) {
		var ret int64
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VM) GetMemoryOk() (*int64, bool) {
	if o == nil || isNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *VM) HasMemory() bool {
	if o != nil && !isNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int64 and assigns it to the Memory field.
func (o *VM) SetMemory(v int64) {
	o.Memory = &v
}

// GetAutostart returns the Autostart field value if set, zero value otherwise.
func (o *VM) GetAutostart() bool {
	if o == nil || isNil(o.Autostart) {
		var ret bool
		return ret
	}
	return *o.Autostart
}

// GetAutostartOk returns a tuple with the Autostart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VM) GetAutostartOk() (*bool, bool) {
	if o == nil || isNil(o.Autostart) {
		return nil, false
	}
	return o.Autostart, true
}

// HasAutostart returns a boolean if a field has been set.
func (o *VM) HasAutostart() bool {
	if o != nil && !isNil(o.Autostart) {
		return true
	}

	return false
}

// SetAutostart gets a reference to the given bool and assigns it to the Autostart field.
func (o *VM) SetAutostart(v bool) {
	o.Autostart = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *VM) GetTime() string {
	if o == nil || isNil(o.Time) {
		var ret string
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VM) GetTimeOk() (*string, bool) {
	if o == nil || isNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *VM) HasTime() bool {
	if o != nil && !isNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given string and assigns it to the Time field.
func (o *VM) SetTime(v string) {
	o.Time = &v
}

// GetBootloader returns the Bootloader field value if set, zero value otherwise.
func (o *VM) GetBootloader() string {
	if o == nil || isNil(o.Bootloader) {
		var ret string
		return ret
	}
	return *o.Bootloader
}

// GetBootloaderOk returns a tuple with the Bootloader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VM) GetBootloaderOk() (*string, bool) {
	if o == nil || isNil(o.Bootloader) {
		return nil, false
	}
	return o.Bootloader, true
}

// HasBootloader returns a boolean if a field has been set.
func (o *VM) HasBootloader() bool {
	if o != nil && !isNil(o.Bootloader) {
		return true
	}

	return false
}

// SetBootloader gets a reference to the given string and assigns it to the Bootloader field.
func (o *VM) SetBootloader(v string) {
	o.Bootloader = &v
}

// GetCores returns the Cores field value if set, zero value otherwise.
func (o *VM) GetCores() int32 {
	if o == nil || isNil(o.Cores) {
		var ret int32
		return ret
	}
	return *o.Cores
}

// GetCoresOk returns a tuple with the Cores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VM) GetCoresOk() (*int32, bool) {
	if o == nil || isNil(o.Cores) {
		return nil, false
	}
	return o.Cores, true
}

// HasCores returns a boolean if a field has been set.
func (o *VM) HasCores() bool {
	if o != nil && !isNil(o.Cores) {
		return true
	}

	return false
}

// SetCores gets a reference to the given int32 and assigns it to the Cores field.
func (o *VM) SetCores(v int32) {
	o.Cores = &v
}

// GetThreads returns the Threads field value if set, zero value otherwise.
func (o *VM) GetThreads() int32 {
	if o == nil || isNil(o.Threads) {
		var ret int32
		return ret
	}
	return *o.Threads
}

// GetThreadsOk returns a tuple with the Threads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VM) GetThreadsOk() (*int32, bool) {
	if o == nil || isNil(o.Threads) {
		return nil, false
	}
	return o.Threads, true
}

// HasThreads returns a boolean if a field has been set.
func (o *VM) HasThreads() bool {
	if o != nil && !isNil(o.Threads) {
		return true
	}

	return false
}

// SetThreads gets a reference to the given int32 and assigns it to the Threads field.
func (o *VM) SetThreads(v int32) {
	o.Threads = &v
}

// GetShutdownTimeout returns the ShutdownTimeout field value if set, zero value otherwise.
func (o *VM) GetShutdownTimeout() int32 {
	if o == nil || isNil(o.ShutdownTimeout) {
		var ret int32
		return ret
	}
	return *o.ShutdownTimeout
}

// GetShutdownTimeoutOk returns a tuple with the ShutdownTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VM) GetShutdownTimeoutOk() (*int32, bool) {
	if o == nil || isNil(o.ShutdownTimeout) {
		return nil, false
	}
	return o.ShutdownTimeout, true
}

// HasShutdownTimeout returns a boolean if a field has been set.
func (o *VM) HasShutdownTimeout() bool {
	if o != nil && !isNil(o.ShutdownTimeout) {
		return true
	}

	return false
}

// SetShutdownTimeout gets a reference to the given int32 and assigns it to the ShutdownTimeout field.
func (o *VM) SetShutdownTimeout(v int32) {
	o.ShutdownTimeout = &v
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *VM) GetDevices() []VMDevice {
	if o == nil || isNil(o.Devices) {
		var ret []VMDevice
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VM) GetDevicesOk() ([]VMDevice, bool) {
	if o == nil || isNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *VM) HasDevices() bool {
	if o != nil && !isNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []VMDevice and assigns it to the Devices field.
func (o *VM) SetDevices(v []VMDevice) {
	o.Devices = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VM) GetStatus() VMStatus {
	if o == nil || isNil(o.Status) {
		var ret VMStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VM) GetStatusOk() (*VMStatus, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VM) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given VMStatus and assigns it to the Status field.
func (o *VM) SetStatus(v VMStatus) {
	o.Status = &v
}

func (o VM) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Vcpus) {
		toSerialize["vcpus"] = o.Vcpus
	}
	if !isNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !isNil(o.Autostart) {
		toSerialize["autostart"] = o.Autostart
	}
	if !isNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !isNil(o.Bootloader) {
		toSerialize["bootloader"] = o.Bootloader
	}
	if !isNil(o.Cores) {
		toSerialize["cores"] = o.Cores
	}
	if !isNil(o.Threads) {
		toSerialize["threads"] = o.Threads
	}
	if !isNil(o.ShutdownTimeout) {
		toSerialize["shutdown_timeout"] = o.ShutdownTimeout
	}
	if !isNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *VM) UnmarshalJSON(bytes []byte) (err error) {
	varVM := _VM{}

	if err = json.Unmarshal(bytes, &varVM); err == nil {
		*o = VM(varVM)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "vcpus")
		delete(additionalProperties, "memory")
		delete(additionalProperties, "autostart")
		delete(additionalProperties, "time")
		delete(additionalProperties, "bootloader")
		delete(additionalProperties, "cores")
		delete(additionalProperties, "threads")
		delete(additionalProperties, "shutdown_timeout")
		delete(additionalProperties, "devices")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVM struct {
	value *VM
	isSet bool
}

func (v NullableVM) Get() *VM {
	return v.value
}

func (v *NullableVM) Set(val *VM) {
	v.value = val
	v.isSet = true
}

func (v NullableVM) IsSet() bool {
	return v.isSet
}

func (v *NullableVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVM(val *VM) *NullableVM {
	return &NullableVM{value: val, isSet: true}
}

func (v NullableVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
